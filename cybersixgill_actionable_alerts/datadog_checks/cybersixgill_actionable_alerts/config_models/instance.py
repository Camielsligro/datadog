# This file is autogenerated.
# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:
#     ddev -x validate config -s <INTEGRATION_NAME>
#     ddev -x validate models -s <INTEGRATION_NAME>

from __future__ import annotations

from typing import Literal, Optional

from pydantic import BaseModel, root_validator, validator

from datadog_checks.base.utils.functions import identity
from datadog_checks.base.utils.models import validation

from . import defaults, validators


class InstanceConfig(BaseModel):
    class Config:
        allow_mutation = False

    alerts_limit: Optional[int]
    cl_id: str
    cl_secret: str
    organization_id: Optional[str]
    threat_level: Optional[str]
    threat_type: Optional[
        Literal[
            'Brand Protection',
            'Data Leak',
            'Malware',
            'Phishing',
            'Fraud',
            'Vulnerability Exploit',
            'Insider Threat',
            'Defacement',
            'Compromised Accounts',
            'DDoS Attack',
            'Web Attack',
            'Trend Anomaly',
        ]
    ]

    @root_validator(pre=True, allow_reuse=True)
    def _initial_validation(cls, values):
        return validation.core.initialize_config(getattr(validators, 'initialize_instance', identity)(values))

    @validator('*', pre=True, always=True)
    def _ensure_defaults(cls, v, field):
        if v is not None or field.required:
            return v

        return getattr(defaults, f'instance_{field.name}')(field, v)

    @validator('*')
    def _run_validations(cls, v, field):
        if not v:
            return v

        return getattr(validators, f'instance_{field.name}', identity)(v, field=field)

    @root_validator(pre=False)
    def _final_validation(cls, values):
        return validation.core.finalize_config(getattr(validators, 'finalize_instance', identity)(values))
