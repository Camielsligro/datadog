[tox]
minversion = 3.0
skip_missing_interpreters = true
basepython = py38
envlist = py36,py37,py38,py39,py310,py311
requires =
    tox<4.0.0

[testenv]
ensure_default_envdir = true
envdir =
    py36: {toxworkdir}{/}py36
    py37: {toxworkdir}{/}py37
    py38: {toxworkdir}{/}py38
    py39: {toxworkdir}{/}py39
    py310: {toxworkdir}{/}py310
    py311: {toxworkdir}{/}py311
description =
    py36: e2e ready
    py37: e2e ready
    py38: e2e ready
    py39: e2e ready
    py310: e2e ready
    py311: e2e ready
dd_check_style = true
usedevelop = true
platform = linux|darwin|win32
extras = deps
deps =
    datadog-checks-base[deps]>=25.1.0
    datadog-checks-dev>=17.5.0
    docker>=5.0.0
    psutil>=5.7.0
    requests>=2.22.0
passenv =
    DOCKER*
    COMPOSE*
commands_pre =
    # workaround moving docker context or symlinked files by copying the check data files for docker
    # this also avoids the alternative situation of building the wheel with data files in an external location
    python -c "import filecmp,shutil,os.path as path; cmpDirs=lambda dir1,dir2: (lambda cmp=filecmp.dircmp(dir1,dir2): False if cmp.left_only or cmp.right_only or cmp.funny_files or any(x for y in filecmp.cmpfiles(dir1,dir2,cmp.common_files,shallow=False)[1:] for x in y) or False in (cmpDirs(path.join(dir1,subdir),path.join(dir2,subdir)) for subdir in cmp.common_dirs) else True)(); (lambda kdir1=path.join('{toxinidir}','datadog_checks','kamailio','scripts'),kdir2=path.join('{toxinidir}','datadog_checks','kamailio','sudoers.d'),ddir1=path.join('{toxinidir}','tests','docker-env','kamailio','.tmp','scripts'),ddir2=path.join('{toxinidir}','tests','docker-env','kamailio','.tmp','sudoers.d'): [shutil.copytree(kdir1,ddir1) if not path.exists(ddir1) else [shutil.rmtree(ddir1),shutil.copytree(kdir1,ddir1)][0] if not cmpDirs(kdir1,ddir1) else None, shutil.copytree(kdir2,ddir2) if not path.exists(ddir2) else [shutil.rmtree(ddir2),shutil.copytree(kdir2,ddir2)][0] if not cmpDirs(kdir2,ddir2) else None][0])();"
    # original inspiration for recursive dir compare: https://stackoverflow.com/a/6681395
    # the above one-liner is functionally equivalent to the following python code:
    #import filecmp
    #import shutil
    #from os import path
    #
    #def cmpDirsRecursive(dir1, dir2):
    #    cmp = filecmp.dircmp(dir1, dir2)
    #    if cmp.left_only or cmp.right_only or cmp.funny_files:
    #        return False
    #    mismatched, errors = filecmp.cmpfiles(dir1, dir2, cmp.common_files, shallow=False)[1:]
    #    if mismatched or errors:
    #        return False
    #    for subdir in cmp.common_dirs:
    #        if not cmpDirsRecursive(path.join(dir1, subdir), path.join(dir2, subdir)):
    #            return False
    #    return True
    #
    #toxinidir = '{toxinidir}'
    #kamscriptsdir = path.join(toxinidir, 'datadog_checks', 'kamailio', 'scripts')
    #kamsudoersdir = path.join(toxinidir, 'datadog_checks', 'kamailio', 'sudoers.d')
    #dockerscriptsdir = path.join(toxinidir, 'tests', 'docker-env', 'kamailio', '.tmp', 'scripts')
    #dockersudoersdir = path.join(toxinidir, 'tests', 'docker-env', 'kamailio', '.tmp', 'sudoers.d')
    #
    #if not path.exists(dockerscriptsdir):
    #    shutil.copytree(kamscriptsdir, dockerscriptsdir)
    #elif not cmpDirsRecursive(kamscriptsdir, dockerscriptsdir):
    #    shutil.rmtree(dockerscriptsdir)
    #    shutil.copytree(kamscriptsdir, dockerscriptsdir)
    #if not path.exists(dockersudoersdir):
    #    shutil.copytree(kamsudoersdir, dockersudoersdir)
    #elif not cmpDirsRecursive(kamsudoersdir, dockersudoersdir):
    #    shutil.rmtree(dockersudoersdir)
    #    shutil.copytree(kamsudoersdir, dockersudoersdir)
commands =
    # run the tests
    pytest -v {posargs}
