dist: xenial
sudo: required
services:
  - docker
language: python
python:
  - '2.7'
cache:
  directories:
    - "$HOME/.cache/pip"
git:
  depth: 3
branches:
  only:
    - master
env:
  global:
    - SKIP_CLEANUP=true
    - PIP_CACHE=$HOME/.cache/pip

stages:
  - name: test_pr
    if: ((type = pull_request) AND (NOT commit_message =~ /ci run all/))
  - name: test
    if: ((branch = master) AND (type != pull_request)) OR ((commit_message =~ /ci run all/) AND (type = pull_request))

script:
  # This is the default script section that will be run for every 'test' stage
  - ddev validate manifest -i
  - ddev validate config
  - ddev validate service-checks
  - ddev validate metadata ${CHECK}
  - if [ -n "$PYTHON3" ]; then ddev validate py3 ${CHECK}; fi
  - travis_retry ddev test --cov ${CHECK}
  - ddev test ${CHECK} --bench || true

# Conditional jobs are currently buggy and verbose.
#
# https://github.com/travis-ci/beta-features/issues/28
# https://github.com/travis-ci/beta-features/issues/40
# https://github.com/travis-ci/travis-ci/issues/8295
# https://github.com/travis-ci/travis-conditions/pull/1
# https://github.com/travis-ci/travis-ci/issues/6652
jobs:
  fast_finish: true
  include:
    - stage: test_pr
      script:
        - ddev validate manifest -i
        - ddev validate config
        - ddev validate service-checks
        - ddev validate metadata
        # with no params, ddev will only test integrations that are part of the branch diff
        - ddev test --cov
        - ddev test --bench || true
    - stage: test
      env: CHECK=aerospike PYTHON3=true
    - stage: test
      env: CHECK=ambassador PYTHON3=true
    - stage: test
      env: CHECK=apollo_engine PYTHON3=true
    - stage: test
      env: CHECK=aqua PYTHON3=true
    - stage: test
      env: CHECK=aws_pricing PYTHON3=true
    - stage: test
      env: CHECK=bind9 PYTHON3=true
    - stage: test
      env: CHECK=bonsai PYTHON3=true
    - stage: test
      env: CHECK=buddy PYTHON3=true
    - stage: test
      env: CHECK=concourse_ci PYTHON3=true
    - stage: test
      env: CHECK=convox PYTHON3=true
    - stage: test
      env: CHECK=eventstore PYTHON3=true
    - stage: test
      env: CHECK=filebeat PYTHON3=true
    - stage: test
      env: CHECK=gnatsd PYTHON3=true
    - stage: test
      env: CHECK=gnatsd_streaming PYTHON3=true
    - stage: test
      env: CHECK=gremlin PYTHON3=true
    - stage: test
      env: CHECK=hbase_master PYTHON3=true
    - stage: test
      env: CHECK=hbase_regionserver PYTHON3=true
    - stage: test
      env: CHECK=launchdarkly PYTHON3=true
    - stage: test
      env: CHECK=lighthouse PYTHON3=true
    - stage: test
      env: CHECK=logstash PYTHON3=true
    - stage: test
      env: CHECK=logzio PYTHON3=true
    - stage: test
      env: CHECK=neo4j PYTHON3=true
    - stage: test
      env: CHECK=neutrona PYTHON3=true
    - stage: test
      env: CHECK=nextcloud PYTHON3=true
    - stage: test
      env: CHECK=nomad PYTHON3=true
    - stage: test
      env: CHECK=portworx PYTHON3=true
    - stage: test
      env: CHECK=rbltracker PYTHON3=true
    - stage: test
      env: CHECK=reboot_required PYTHON3=true
    - stage: test
      env: CHECK=redis_sentinel PYTHON3=true
    - stage: test
      env: CHECK=riak_repl PYTHON3=true
    - stage: test
      env: CHECK=rigor PYTHON3=true
    - stage: test
      env: CHECK=rookout PYTHON3=true
    - stage: test
      env: CHECK=sigsci PYTHON3=true
    - stage: test
      env: CHECK=snmpwalk PYTHON3=true
    - stage: test
      env: CHECK=sortdb PYTHON3=true
    - stage: test
      env: CHECK=split PYTHON3=true
    - stage: test
      env: CHECK=stardog PYTHON3=true
    - stage: test
      env: CHECK=storm PYTHON3=true
    - stage: test
      env: CHECK=traefik PYTHON3=true
    - stage: test
      env: CHECK=upsc PYTHON3=true
    - stage: test
      env: CHECK=uptime PYTHON3=true
    - stage: test
      env: CHECK=vns3 PYTHON3=true

before_install:
  - PATH="$(pyenv root)/versions/3.7.1/bin:$PATH:$(pyenv root)/versions/3.6.7/bin"

install:
  - pip install -U pip setuptools codecov
  - pip install -r requirements-dev.txt
  - ddev config set extras .
  - ddev config set repo extras

# we should clean generated files before we save the cache
# We don't want to save .pyc files, so we'll use find and -delete
before_cache:
  - find $HOME/.cache/pip -name *.pyc -delete
